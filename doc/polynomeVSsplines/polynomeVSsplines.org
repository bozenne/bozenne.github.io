#+TITLE: Splines vs. polynomes for fitting non-linear relationships

\bigskip

/Note:/ this is document is inspired from http://stackoverflow.com/questions/15837763/b-spline-confusion

\clearpage

* Simulate data
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
library(splines)
library(data.table)
library(ggplot2)
library(mgcv)

set.seed(1)
n <- 400

x <- 0:(n-1)/(n-1)
dt <- data.table(X = x,
                 Ytrue =  0.2*x^11*(10*(1-x))^6+10*(10*x)^3*(1-x)^10)
dt[,Y := Ytrue + rnorm(n, 0, sd = 0.5)]
#+END_SRC


* Prepare data with non linear transformations of X
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache no 
dt[,X2 := X^2]
dt[,X3 := X^3]
dt[,X4 := X^4]
dt[,X5 := X^5]
dt[,X6 := X^6]

Xknots <- c(0.2, 0.5, 0.7)
SplineTempo <- bs(dt$X, knots = Xknots)
dt <- cbind(dt, setNames(as.data.frame(SplineTempo), paste0("S",1:ncol(SplineTempo))))
#+END_SRC

#+RESULTS:

\clearpage

* Fit models
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache yes 
lmPoly <- lm(Y ~ X + X2 + X3 + X4 + X5 + X6, data = dt)

lmSpline <- lm(Y ~ bs(x, knots = c(0.2, 0.5, 0.7)), data = dt)

lmSplineI <- lm(Y ~ S1 + S2 + S3 + S4 + S5 + S6, data = dt)
range(coef(lmSpline)-coef(lmSplineI)) # same as lmSpline

autoSpline <- gam(Y ~ s(X), data = dt)
#+END_SRC

#+RESULTS[<2017-07-01 22:14:13> 77eb842b6d21e4e7eca5dd934b08c7ab1b1ebba5]:
: [1] 0 0

Residual degree of freedom:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache yes 
c(df.residual(lmPoly),df.residual(lmSpline), df.residual(autoSpline))
#+END_SRC

#+RESULTS[<2017-07-01 22:28:30> 93bb4a0e6afe6c7929462c200ffe3a447f14d7bf]:
: [1] 393.0000 393.0000 390.0559

* Extract the fitted values
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache yes 
seqX <- seq(min(dt$X), max(dt$X), length = 100)

dt2 <- data.table(Y = dt$Y, X = dt$X, type = "observed")

predPoly <- predict(lmPoly, newdata = data.frame(X = seqX, X2 = seqX^2, X3 = seqX^3, X4 = seqX^4, X5 = seqX^5, X6 = seqX^6))
dt2 <- rbind(dt2, data.frame(Y = predPoly, X = seqX, type = "poly"))

predSpline <- predict(lmSpline, newdata = data.frame(x = seqX))
dt2 <- rbind(dt2, data.frame(Y = predSpline, X = seqX, type = "spline"))

predGam <- predict(autoSpline, newdata = data.frame(X = seqX))
dt2 <- rbind(dt2, data.frame(Y = predGam, X = seqX, type = "gam"))
#+END_SRC

* Display fit

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
  ggbase <- ggplot(dt2[dt2$type == "observed",], aes(x = X, y = Y)) + geom_point()
  ggbase <- ggbase + geom_line(data = dt2[dt2$type != "observed",],
                               aes(x = X, y = Y, group = type, color = type),
                               size = 2)
   ggbase <- ggbase + theme(text = element_text(size=30))
#+END_SRC

#+RESULTS:

# filename <- "c:/Users/hpl802/Documents/GitHub/consultationNRU/download/polynomeVSsplines/comparaison.eps"
# ggsave(ggbase, filename = filename)

#+ATTR_LATEX: :width 1\textwidth :options clip=true, trim=0cm 0cm 0cm 0cm
file:./comparaison.eps


Splines give a better fit compared to a 3rd order polynomial when the knots are correctly placed

* Header :noexport:
#+LANGUAGE:  en
#+LaTeX_CLASS: org-article
#+PROPERTY: session *R*
#+LATEX_HEADER: \usepackage[top=3cm, bottom=3cm, left=3cm, right=3cm]{geometry}
